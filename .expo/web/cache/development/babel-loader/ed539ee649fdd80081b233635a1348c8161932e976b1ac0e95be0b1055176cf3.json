{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateProgress } from \"../../store/progress-slice\";\nimport styles from \"./styles\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ProgressTracking() {\n  var progressValue = useSelector(function (state) {\n    return state.progress.progressValue;\n  });\n  var dispatch = useDispatch();\n  var handleUpdateProgress = function handleUpdateProgress(topicName, progress) {\n    dispatch(updateProgress({\n      topicName: topicName,\n      progress: progress\n    }));\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      style: styles.topic,\n      children: [\"Total Progress: \", progressValue.toFixed(2), \"%\"]\n    }), _jsx(Button, {\n      title: \"Update Total Progress\",\n      onPress: function onPress() {\n        var progress = Math.random() * 100;\n        handleUpdateProgress(\"Topic 1\", progress);\n      }\n    })]\n  });\n}","map":{"version":3,"names":["React","View","Text","Button","useSelector","useDispatch","updateProgress","styles","jsxs","_jsxs","jsx","_jsx","ProgressTracking","progressValue","state","progress","dispatch","handleUpdateProgress","topicName","style","container","children","topic","toFixed","title","onPress","Math","random"],"sources":["/Users/big/Appinbox-projects/SailAI/src/components/progress-tracking/progress-tracking.tsx"],"sourcesContent":["// ProgressTracking.js\nimport React from \"react\";\nimport { View, Text, Button } from \"react-native\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { updateProgress } from \"../../store/progress-slice\";\nimport styles from \"./styles\";\n\nexport default function ProgressTracking() {\n  const progressValue = useSelector(\n    (state: RootState) => state.progress.progressValue\n  );\n  const dispatch = useDispatch();\n\n  const handleUpdateProgress = (topicName: string, progress: number) => {\n    dispatch(updateProgress({ topicName, progress }));\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.topic}>\n        Total Progress: {progressValue.toFixed(2)}%\n      </Text>\n      <Button\n        title=\"Update Total Progress\"\n        onPress={() => {\n          const progress = Math.random() * 100;\n          handleUpdateProgress(\"Topic 1\", progress);\n        }}\n      />\n    </View>\n  );\n}\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAE1B,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,SAASC,cAAc;AACvB,OAAOC,MAAM;AAAiB,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAE9B,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EACzC,IAAMC,aAAa,GAAGT,WAAW,CAC/B,UAACU,KAAgB;IAAA,OAAKA,KAAK,CAACC,QAAQ,CAACF,aAAa;EAAA,CACpD,CAAC;EACD,IAAMG,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9B,IAAMY,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,SAAiB,EAAEH,QAAgB,EAAK;IACpEC,QAAQ,CAACV,cAAc,CAAC;MAAEY,SAAS,EAATA,SAAS;MAAEH,QAAQ,EAARA;IAAS,CAAC,CAAC,CAAC;EACnD,CAAC;EAED,OACEN,KAAA,CAACR,IAAI;IAACkB,KAAK,EAAEZ,MAAM,CAACa,SAAU;IAAAC,QAAA,GAC5BZ,KAAA,CAACP,IAAI;MAACiB,KAAK,EAAEZ,MAAM,CAACe,KAAM;MAAAD,QAAA,GAAC,kBACT,EAACR,aAAa,CAACU,OAAO,CAAC,CAAC,CAAC,EAAC,GAC5C;IAAA,CAAM,CAAC,EACPZ,IAAA,CAACR,MAAM;MACLqB,KAAK,EAAC,uBAAuB;MAC7BC,OAAO,EAAE,SAAAA,QAAA,EAAM;QACb,IAAMV,QAAQ,GAAGW,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;QACpCV,oBAAoB,CAAC,SAAS,EAAEF,QAAQ,CAAC;MAC3C;IAAE,CACH,CAAC;EAAA,CACE,CAAC;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}