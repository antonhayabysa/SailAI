{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\nimport styles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function WordCollectionScreen() {\n  var correctSentence = \"Hello World\";\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedWords = _useState2[0],\n    setSelectedWords = _useState2[1];\n  var _useState3 = useState([{\n      key: \"Hello\"\n    }, {\n      key: \"World\"\n    }]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    data = _useState4[0],\n    setData = _useState4[1];\n  var handleCheck = function handleCheck() {\n    var sentence = selectedWords.join(\" \");\n    if (sentence === correctSentence) {\n      Alert.alert(\"Correct!\", \"The sentence is correct.\");\n    } else {\n      Alert.alert(\"Incorrect!\", \"The sentence is incorrect. Try again.\");\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.dropZone,\n      children: selectedWords.map(function (word, index) {\n        return _jsx(TouchableOpacity, {\n          style: styles.droppedWord,\n          children: _jsx(Text, {\n            children: word\n          })\n        }, index);\n      })\n    }), _jsx(DraggableFlatList, {\n      data: data,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n          drag = _ref.drag;\n        return _jsx(TouchableOpacity, {\n          onLongPress: drag,\n          onPress: function onPress() {\n            if (!selectedWords.includes(item.key)) {\n              setSelectedWords([].concat(_toConsumableArray(selectedWords), [item.key]));\n            }\n          },\n          children: _jsx(Text, {\n            children: item.key\n          })\n        });\n      },\n      keyExtractor: function keyExtractor(item) {\n        return `draggable-item-${item.key}`;\n      },\n      onDragEnd: function onDragEnd(_ref2) {\n        var data = _ref2.data;\n        return setData(data);\n      }\n    }), _jsx(TouchableOpacity, {\n      onPress: handleCheck,\n      style: styles.button,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Check\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","Alert","DraggableFlatList","styles","jsx","_jsx","jsxs","_jsxs","WordCollectionScreen","correctSentence","_useState","_useState2","_slicedToArray","selectedWords","setSelectedWords","_useState3","key","_useState4","data","setData","handleCheck","sentence","join","alert","style","container","children","dropZone","map","word","index","droppedWord","renderItem","_ref","item","drag","onLongPress","onPress","includes","concat","_toConsumableArray","keyExtractor","onDragEnd","_ref2","button","buttonText"],"sources":["/Users/big/Appinbox-projects/SailAI/src/screens/word-collection-screen/word-collection-screen.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { View, Text, TouchableOpacity, Alert } from \"react-native\";\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\nimport styles from \"./styles\";\n\nexport default function WordCollectionScreen() {\n  const correctSentence = \"Hello World\";\n  const [selectedWords, setSelectedWords] = useState([]);\n  const [data, setData] = useState([\n    { key: \"Hello\" },\n    { key: \"World\" }\n    // Добавьте здесь больше случайных слов\n  ]);\n\n  const handleCheck = () => {\n    const sentence = selectedWords.join(\" \");\n    if (sentence === correctSentence) {\n      Alert.alert(\"Correct!\", \"The sentence is correct.\");\n    } else {\n      Alert.alert(\"Incorrect!\", \"The sentence is incorrect. Try again.\");\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Нижняя область для перетаскивания слов */}\n      <View style={styles.dropZone}>\n        {selectedWords.map((word, index) => (\n          <TouchableOpacity key={index} style={styles.droppedWord}>\n            <Text>{word}</Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n      {/* Список перетаскиваемых слов */}\n      <DraggableFlatList\n        data={data}\n        renderItem={({ item, drag }) => (\n          <TouchableOpacity\n            onLongPress={drag}\n            onPress={() => {\n              if (!selectedWords.includes(item.key)) {\n                setSelectedWords([...selectedWords, item.key]);\n              }\n            }}\n          >\n            <Text>{item.key}</Text>\n          </TouchableOpacity>\n        )}\n        keyExtractor={(item) => `draggable-item-${item.key}`}\n        onDragEnd={({ data }) => setData(data)}\n      />\n      <TouchableOpacity onPress={handleCheck} style={styles.button}>\n        <Text style={styles.buttonText}>Check</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}