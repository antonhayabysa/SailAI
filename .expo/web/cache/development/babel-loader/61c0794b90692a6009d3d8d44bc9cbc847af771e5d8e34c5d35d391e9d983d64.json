{"ast":null,"code":"import { useRef, useCallback } from \"react\";\nexport function useStableCallback(cb) {\n  var cbRef = useRef(cb);\n  cbRef.current = cb;\n  var identityRetainingCb = useCallback(function () {\n    return cbRef.current.apply(cbRef, arguments);\n  }, []);\n  return identityRetainingCb;\n}","map":{"version":3,"names":["useRef","useCallback","useStableCallback","cb","cbRef","current","identityRetainingCb","apply","arguments"],"sources":["/Users/big/Appinbox-projects/SailAI/node_modules/react-native-draggable-flatlist/lib/module/hooks/useStableCallback.ts"],"sourcesContent":["import { useRef, useCallback } from \"react\";\n\n// Utility hook that returns a function that never has stale dependencies, but\n// without changing identity, as a useCallback with dep array would.\n// Useful for functions that depend on external state, but\n// should not trigger effects when that external state changes.\n\nexport function useStableCallback<\n  T extends (arg1?: any, arg2?: any, arg3?: any) => any\n>(cb: T) {\n  const cbRef = useRef(cb);\n  cbRef.current = cb;\n  const identityRetainingCb = useCallback(\n    (...args: Parameters<T>) => cbRef.current(...args),\n    []\n  );\n  return identityRetainingCb as T;\n}\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,OAApC;AAOA,OAAO,SAASC,iBAATA,CAELC,EAFK,EAEE;EACP,IAAMC,KAAK,GAAGJ,MAAM,CAACG,EAAD,CAApB;EACAC,KAAK,CAACC,OAAN,GAAgBF,EAAhB;EACA,IAAMG,mBAAmB,GAAGL,WAAW,CACrC;IAAA,OAA4BG,KAAK,CAACC,OAAN,CAAAE,KAAA,CAAAH,KAAK,EAASI,SAAd,CAA5B;EAAA,CADqC,EAErC,EAFqC,CAAvC;EAIA,OAAOF,mBAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}