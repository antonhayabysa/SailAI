{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar progressSlice = createSlice({\n  name: \"progress\",\n  initialState: {\n    topics: [{\n      name: \"Topic 1\",\n      progress: 0\n    }, {\n      name: \"Topic 2\",\n      progress: 0\n    }],\n    progressValue: 0\n  },\n  reducers: {\n    updateProgress: function updateProgress(state, action) {\n      var _action$payload = action.payload,\n        topicName = _action$payload.topicName,\n        progress = _action$payload.progress;\n      var topic = state.topics.find(function (t) {\n        return t.name === topicName;\n      });\n      if (topic) {\n        topic.progress = progress;\n      }\n      state.progressValue = state.topics.reduce(function (total, topic) {\n        return total + topic.progress;\n      }, 0);\n    },\n    updateWords: function updateWords(state, action) {\n      state.selectedWords = action.payload;\n    }\n  }\n});\nvar _progressSlice$action = progressSlice.actions,\n  updateProgress = _progressSlice$action.updateProgress,\n  updateWords = _progressSlice$action.updateWords;\nexport { updateProgress, updateWords };\nexport default progressSlice.reducer;","map":{"version":3,"names":["createSlice","progressSlice","name","initialState","topics","progress","progressValue","reducers","updateProgress","state","action","_action$payload","payload","topicName","topic","find","t","reduce","total","updateWords","selectedWords","_progressSlice$action","actions","reducer"],"sources":["/Users/big/Appinbox-projects/SailAI/src/store/progress-slice.ts"],"sourcesContent":["// progress-slice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst progressSlice = createSlice({\n  name: \"progress\",\n  initialState: {\n    topics: [\n      { name: \"Topic 1\", progress: 0 },\n      { name: \"Topic 2\", progress: 0 },\n    ],\n    progressValue: 0, // Начальное значение прогресса\n  },\n  reducers: {\n    updateProgress: (state, action) => {\n      const { topicName, progress } = action.payload;\n      const topic = state.topics.find((t) => t.name === topicName);\n      if (topic) {\n        topic.progress = progress;\n      }\n      // Обновляем общее значение прогресса на основе значений тем\n      state.progressValue = state.topics.reduce(\n        (total, topic) => total + topic.progress,\n        0\n      );\n    },\n    updateWords: (state, action) => {\n      state.selectedWords = action.payload;\n    },\n  },\n});\n\nexport const { updateProgress, updateWords } = progressSlice.actions;\n\nexport type ProgressState = typeof initialState;\n\nexport default progressSlice.reducer;\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,IAAMC,aAAa,GAAGD,WAAW,CAAC;EAChCE,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZC,MAAM,EAAE,CACN;MAAEF,IAAI,EAAE,SAAS;MAAEG,QAAQ,EAAE;IAAE,CAAC,EAChC;MAAEH,IAAI,EAAE,SAAS;MAAEG,QAAQ,EAAE;IAAE,CAAC,CACjC;IACDC,aAAa,EAAE;EACjB,CAAC;EACDC,QAAQ,EAAE;IACRC,cAAc,EAAE,SAAAA,eAACC,KAAK,EAAEC,MAAM,EAAK;MACjC,IAAAC,eAAA,GAAgCD,MAAM,CAACE,OAAO;QAAtCC,SAAS,GAAAF,eAAA,CAATE,SAAS;QAAER,QAAQ,GAAAM,eAAA,CAARN,QAAQ;MAC3B,IAAMS,KAAK,GAAGL,KAAK,CAACL,MAAM,CAACW,IAAI,CAAC,UAACC,CAAC;QAAA,OAAKA,CAAC,CAACd,IAAI,KAAKW,SAAS;MAAA,EAAC;MAC5D,IAAIC,KAAK,EAAE;QACTA,KAAK,CAACT,QAAQ,GAAGA,QAAQ;MAC3B;MAEAI,KAAK,CAACH,aAAa,GAAGG,KAAK,CAACL,MAAM,CAACa,MAAM,CACvC,UAACC,KAAK,EAAEJ,KAAK;QAAA,OAAKI,KAAK,GAAGJ,KAAK,CAACT,QAAQ;MAAA,GACxC,CACF,CAAC;IACH,CAAC;IACDc,WAAW,EAAE,SAAAA,YAACV,KAAK,EAAEC,MAAM,EAAK;MAC9BD,KAAK,CAACW,aAAa,GAAGV,MAAM,CAACE,OAAO;IACtC;EACF;AACF,CAAC,CAAC;AAEK,IAAAS,qBAAA,GAAwCpB,aAAa,CAACqB,OAAO;EAArDd,cAAc,GAAAa,qBAAA,CAAdb,cAAc;EAAEW,WAAW,GAAAE,qBAAA,CAAXF,WAAW;AAA2B,SAAAX,cAAA,EAAAW,WAAA;AAIrE,eAAelB,aAAa,CAACsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}