{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\nimport styles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function WordCollectionScreen() {\n  var correctSentence = \"Hello World\";\n  var _useState = useState(new Set()),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedWords = _useState2[0],\n    setSelectedWords = _useState2[1];\n  var _useState3 = useState([{\n      key: \"Hello\"\n    }, {\n      key: \"World\"\n    }]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    data = _useState4[0],\n    setData = _useState4[1];\n  var handleCheck = function handleCheck() {\n    var sentence = Array.from(selectedWords).join(\" \");\n    if (sentence === correctSentence) {\n      alert(\"Correct!\");\n    } else {\n      alert(\"Try again.\");\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(DraggableFlatList, {\n      data: data,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n          drag = _ref.drag;\n        return _jsx(TouchableOpacity, {\n          onLongPress: drag,\n          onPress: function onPress() {\n            return setSelectedWords(new Set([].concat(_toConsumableArray(selectedWords), [item.key])));\n          },\n          children: _jsx(Text, {\n            children: item.key\n          })\n        });\n      },\n      keyExtractor: function keyExtractor(item) {\n        return `draggable-item-${item.key}`;\n      },\n      onDragEnd: function onDragEnd(_ref2) {\n        var data = _ref2.data;\n        return setData(data);\n      }\n    }), _jsx(TouchableOpacity, {\n      onPress: handleCheck,\n      style: styles.button,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Check\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","DraggableFlatList","styles","jsx","_jsx","jsxs","_jsxs","WordCollectionScreen","correctSentence","_useState","Set","_useState2","_slicedToArray","selectedWords","setSelectedWords","_useState3","key","_useState4","data","setData","handleCheck","sentence","Array","from","join","alert","style","container","children","renderItem","_ref","item","drag","onLongPress","onPress","concat","_toConsumableArray","keyExtractor","onDragEnd","_ref2","button","buttonText"],"sources":["/Users/big/Appinbox-projects/SailAI/src/screens/word-collection-screen/word-collection-screen.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { View, Text, TouchableOpacity } from \"react-native\";\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\nimport styles from \"./styles\";\n\nexport default function WordCollectionScreen() {\n  const correctSentence = \"Hello World\";\n  const [selectedWords, setSelectedWords] = useState<Set<string>>(new Set());\n  const [data, setData] = useState([{ key: \"Hello\" }, { key: \"World\" }]);\n\n  const handleCheck = () => {\n    const sentence = Array.from(selectedWords).join(\" \");\n    if (sentence === correctSentence) {\n      alert(\"Correct!\");\n    } else {\n      alert(\"Try again.\");\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <DraggableFlatList\n        data={data}\n        renderItem={({ item, drag }) => (\n          <TouchableOpacity\n            onLongPress={drag}\n            onPress={() =>\n              setSelectedWords(new Set([...selectedWords, item.key]))\n            }\n          >\n            <Text>{item.key}</Text>\n          </TouchableOpacity>\n        )}\n        keyExtractor={(item) => `draggable-item-${item.key}`}\n        onDragEnd={({ data }) => setData(data)}\n      />\n      <TouchableOpacity onPress={handleCheck} style={styles.button}>\n        <Text style={styles.buttonText}>Check</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAExC,OAAOC,iBAAiB,MAAM,iCAAiC;AAC/D,OAAOC,MAAM;AAAiB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE9B,eAAe,SAASC,oBAAoBA,CAAA,EAAG;EAC7C,IAAMC,eAAe,GAAG,aAAa;EACrC,IAAAC,SAAA,GAA0CZ,QAAQ,CAAc,IAAIa,GAAG,CAAC,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAAnEI,aAAa,GAAAF,UAAA;IAAEG,gBAAgB,GAAAH,UAAA;EACtC,IAAAI,UAAA,GAAwBlB,QAAQ,CAAC,CAAC;MAAEmB,GAAG,EAAE;IAAQ,CAAC,EAAE;MAAEA,GAAG,EAAE;IAAQ,CAAC,CAAC,CAAC;IAAAC,UAAA,GAAAL,cAAA,CAAAG,UAAA;IAA/DG,IAAI,GAAAD,UAAA;IAAEE,OAAO,GAAAF,UAAA;EAEpB,IAAMG,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxB,IAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAACV,aAAa,CAAC,CAACW,IAAI,CAAC,GAAG,CAAC;IACpD,IAAIH,QAAQ,KAAKb,eAAe,EAAE;MAChCiB,KAAK,CAAC,UAAU,CAAC;IACnB,CAAC,MAAM;MACLA,KAAK,CAAC,YAAY,CAAC;IACrB;EACF,CAAC;EAED,OACEnB,KAAA,CAACR,IAAI;IAAC4B,KAAK,EAAExB,MAAM,CAACyB,SAAU;IAAAC,QAAA,GAC5BxB,IAAA,CAACH,iBAAiB;MAChBiB,IAAI,EAAEA,IAAK;MACXW,UAAU,EAAE,SAAAA,WAAAC,IAAA;QAAA,IAAGC,IAAI,GAAAD,IAAA,CAAJC,IAAI;UAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;QAAA,OACvB5B,IAAA,CAACJ,gBAAgB;UACfiC,WAAW,EAAED,IAAK;UAClBE,OAAO,EAAE,SAAAA,QAAA;YAAA,OACPpB,gBAAgB,CAAC,IAAIJ,GAAG,IAAAyB,MAAA,CAAAC,kBAAA,CAAKvB,aAAa,IAAEkB,IAAI,CAACf,GAAG,EAAC,CAAC,CAAC;UAAA,CACxD;UAAAY,QAAA,EAEDxB,IAAA,CAACL,IAAI;YAAA6B,QAAA,EAAEG,IAAI,CAACf;UAAG,CAAO;QAAC,CACP,CAAC;MAAA,CACnB;MACFqB,YAAY,EAAE,SAAAA,aAACN,IAAI;QAAA,OAAM,kBAAiBA,IAAI,CAACf,GAAI,EAAC;MAAA,CAAC;MACrDsB,SAAS,EAAE,SAAAA,UAAAC,KAAA;QAAA,IAAGrB,IAAI,GAAAqB,KAAA,CAAJrB,IAAI;QAAA,OAAOC,OAAO,CAACD,IAAI,CAAC;MAAA;IAAC,CACxC,CAAC,EACFd,IAAA,CAACJ,gBAAgB;MAACkC,OAAO,EAAEd,WAAY;MAACM,KAAK,EAAExB,MAAM,CAACsC,MAAO;MAAAZ,QAAA,EAC3DxB,IAAA,CAACL,IAAI;QAAC2B,KAAK,EAAExB,MAAM,CAACuC,UAAW;QAAAb,QAAA,EAAC;MAAK,CAAM;IAAC,CAC5B,CAAC;EAAA,CACf,CAAC;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}