{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nvar initialState = {\n  selectedWords: [],\n  topics: [{\n    name: 'Topic 1',\n    progress: 0\n  }, {\n    name: 'Topic 2',\n    progress: 0\n  }]\n};\nvar progressSlice = createSlice({\n  name: 'progress',\n  initialState: initialState,\n  reducers: {\n    updateProgress: function updateProgress(state, action) {\n      var _action$payload = action.payload,\n        topicName = _action$payload.topicName,\n        progress = _action$payload.progress;\n      var topic = state.topics.find(function (t) {\n        return t.name === topicName;\n      });\n      if (topic) {\n        topic.progress = progress;\n      }\n    },\n    updateWords: function updateWords(state, action) {\n      state.selectedWords = action.payload;\n    }\n  }\n});\nvar _progressSlice$action = progressSlice.actions,\n  updateProgress = _progressSlice$action.updateProgress,\n  updateWords = _progressSlice$action.updateWords;\nexport { updateProgress, updateWords };\nexport default progressSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","selectedWords","topics","name","progress","progressSlice","reducers","updateProgress","state","action","_action$payload","payload","topicName","topic","find","t","updateWords","_progressSlice$action","actions","reducer"],"sources":["/Users/big/Appinbox-projects/SailAI/src/store/progress-slice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  selectedWords: [],\n  topics: [\n    { name: 'Topic 1', progress: 0 },\n    { name: 'Topic 2', progress: 0 },\n  ],\n};\n\nconst progressSlice = createSlice({\n  name: 'progress',\n  initialState,\n  reducers: {\n    updateProgress: (state, action) => {\n      const { topicName, progress } = action.payload;\n      const topic = state.topics.find((t) => t.name === topicName);\n      if (topic) {\n        topic.progress = progress;\n      }\n    },\n    updateWords: (state, action) => {\n      state.selectedWords = action.payload;\n    },\n  },\n});\n\nexport const { updateProgress, updateWords } = progressSlice.actions;\n\nexport type ProgressState = typeof initialState;\n\nexport default progressSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,IAAMC,YAAY,GAAG;EACnBC,aAAa,EAAE,EAAE;EACjBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,SAAS;IAAEC,QAAQ,EAAE;EAAE,CAAC,EAChC;IAAED,IAAI,EAAE,SAAS;IAAEC,QAAQ,EAAE;EAAE,CAAC;AAEpC,CAAC;AAED,IAAMC,aAAa,GAAGN,WAAW,CAAC;EAChCI,IAAI,EAAE,UAAU;EAChBH,YAAY,EAAZA,YAAY;EACZM,QAAQ,EAAE;IACRC,cAAc,EAAE,SAAAA,eAACC,KAAK,EAAEC,MAAM,EAAK;MACjC,IAAAC,eAAA,GAAgCD,MAAM,CAACE,OAAO;QAAtCC,SAAS,GAAAF,eAAA,CAATE,SAAS;QAAER,QAAQ,GAAAM,eAAA,CAARN,QAAQ;MAC3B,IAAMS,KAAK,GAAGL,KAAK,CAACN,MAAM,CAACY,IAAI,CAAC,UAACC,CAAC;QAAA,OAAKA,CAAC,CAACZ,IAAI,KAAKS,SAAS;MAAA,EAAC;MAC5D,IAAIC,KAAK,EAAE;QACTA,KAAK,CAACT,QAAQ,GAAGA,QAAQ;MAC3B;IACF,CAAC;IACDY,WAAW,EAAE,SAAAA,YAACR,KAAK,EAAEC,MAAM,EAAK;MAC9BD,KAAK,CAACP,aAAa,GAAGQ,MAAM,CAACE,OAAO;IACtC;EACF;AACF,CAAC,CAAC;AAEK,IAAAM,qBAAA,GAAwCZ,aAAa,CAACa,OAAO;EAArDX,cAAc,GAAAU,qBAAA,CAAdV,cAAc;EAAES,WAAW,GAAAC,qBAAA,CAAXD,WAAW;AAA2B,SAAAT,cAAA,EAAAS,WAAA;AAIrE,eAAeX,aAAa,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}