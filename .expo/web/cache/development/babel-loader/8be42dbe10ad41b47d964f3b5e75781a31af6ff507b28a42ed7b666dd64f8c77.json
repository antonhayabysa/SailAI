{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useContext } from \"react\";\nimport { useMemo, useRef } from \"react\";\nimport { DEFAULT_PROPS } from \"../constants\";\nimport { useProps } from \"./propsContext\";\nvar RefContext = React.createContext(undefined);\nexport default function RefProvider(_ref) {\n  var children = _ref.children,\n    flatListRef = _ref.flatListRef;\n  var value = useSetupRefs({\n    flatListRef: flatListRef\n  });\n  return React.createElement(RefContext.Provider, {\n    value: value\n  }, children);\n}\nexport function useRefs() {\n  var value = useContext(RefContext);\n  if (!value) {\n    throw new Error(\"useRefs must be called from within a RefContext.Provider!\");\n  }\n  return value;\n}\nfunction useSetupRefs(_ref2) {\n  var flatListRefProp = _ref2.flatListRef;\n  var props = useProps();\n  var _props$animationConfi = props.animationConfig,\n    animationConfig = _props$animationConfi === void 0 ? DEFAULT_PROPS.animationConfig : _props$animationConfi;\n  var propsRef = useRef(props);\n  propsRef.current = props;\n  var animConfig = _objectSpread(_objectSpread({}, DEFAULT_PROPS.animationConfig), animationConfig);\n  var animationConfigRef = useRef(animConfig);\n  animationConfigRef.current = animConfig;\n  var cellDataRef = useRef(new Map());\n  var keyToIndexRef = useRef(new Map());\n  var containerRef = useRef(null);\n  var flatlistRefInternal = useRef(null);\n  var flatlistRef = flatListRefProp || flatlistRefInternal;\n  var scrollViewRef = useRef(null);\n  var refs = useMemo(function () {\n    return {\n      animationConfigRef: animationConfigRef,\n      cellDataRef: cellDataRef,\n      containerRef: containerRef,\n      flatlistRef: flatlistRef,\n      keyToIndexRef: keyToIndexRef,\n      propsRef: propsRef,\n      scrollViewRef: scrollViewRef\n    };\n  }, []);\n  return refs;\n}","map":{"version":3,"names":["React","useContext","useMemo","useRef","DEFAULT_PROPS","useProps","RefContext","createContext","undefined","RefProvider","_ref","children","flatListRef","value","useSetupRefs","createElement","Provider","useRefs","Error","_ref2","flatListRefProp","props","_props$animationConfi","animationConfig","propsRef","current","animConfig","_objectSpread","animationConfigRef","cellDataRef","Map","keyToIndexRef","containerRef","flatlistRefInternal","flatlistRef","scrollViewRef","refs"],"sources":["/Users/big/Appinbox-projects/SailAI/node_modules/react-native-draggable-flatlist/lib/module/context/refContext.tsx"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { useMemo, useRef } from \"react\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport Animated, { WithSpringConfig } from \"react-native-reanimated\";\nimport { DEFAULT_PROPS } from \"../constants\";\nimport { useProps } from \"./propsContext\";\nimport { CellData, DraggableFlatListProps } from \"../types\";\n\ntype RefContextValue<T> = {\n  propsRef: React.MutableRefObject<DraggableFlatListProps<T>>;\n  animationConfigRef: React.MutableRefObject<WithSpringConfig>;\n  cellDataRef: React.MutableRefObject<Map<string, CellData>>;\n  keyToIndexRef: React.MutableRefObject<Map<string, number>>;\n  containerRef: React.RefObject<Animated.View>;\n  flatlistRef: React.RefObject<FlatList<T>> | React.ForwardedRef<FlatList<T>>;\n  scrollViewRef: React.RefObject<Animated.ScrollView>;\n};\nconst RefContext = React.createContext<RefContextValue<any> | undefined>(\n  undefined\n);\n\nexport default function RefProvider<T>({\n  children,\n  flatListRef,\n}: {\n  children: React.ReactNode;\n  flatListRef?: React.ForwardedRef<FlatList<T>> | null;\n}) {\n  const value = useSetupRefs<T>({ flatListRef });\n  return <RefContext.Provider value={value}>{children}</RefContext.Provider>;\n}\n\nexport function useRefs<T>() {\n  const value = useContext(RefContext);\n  if (!value) {\n    throw new Error(\n      \"useRefs must be called from within a RefContext.Provider!\"\n    );\n  }\n  return value as RefContextValue<T>;\n}\n\nfunction useSetupRefs<T>({\n  flatListRef: flatListRefProp,\n}: {\n  flatListRef?: React.ForwardedRef<FlatList<T>> | null;\n}) {\n  const props = useProps<T>();\n  const { animationConfig = DEFAULT_PROPS.animationConfig } = props;\n\n  const propsRef = useRef(props);\n  propsRef.current = props;\n  const animConfig = {\n    ...DEFAULT_PROPS.animationConfig,\n    ...animationConfig,\n  } as WithSpringConfig;\n  const animationConfigRef = useRef(animConfig);\n  animationConfigRef.current = animConfig;\n\n  const cellDataRef = useRef(new Map<string, CellData>());\n  const keyToIndexRef = useRef(new Map<string, number>());\n  const containerRef = useRef<Animated.View>(null);\n  const flatlistRefInternal = useRef<FlatList<T>>(null);\n  const flatlistRef = flatListRefProp || flatlistRefInternal;\n  const scrollViewRef = useRef<Animated.ScrollView>(null);\n\n  // useEffect(() => {\n  //   // This is a workaround for the fact that RN does not respect refs passed in\n  //   // to renderScrollViewComponent underlying ScrollView (currently not used but\n  //   // may need to add if we want to use reanimated scrollTo in the future)\n  //   //@ts-ignore\n  //   const scrollRef = flatlistRef.current?.getNativeScrollRef();\n  //   if (!scrollViewRef.current) {\n  //     //@ts-ignore\n  //     scrollViewRef(scrollRef);\n  //   }\n  // }, []);\n\n  const refs = useMemo(\n    () => ({\n      animationConfigRef,\n      cellDataRef,\n      containerRef,\n      flatlistRef,\n      keyToIndexRef,\n      propsRef,\n      scrollViewRef,\n    }),\n    []\n  );\n\n  return refs;\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AAGA,SAASC,aAAT;AACA,SAASC,QAAT;AAYA,IAAMC,UAAU,GAAGN,KAAK,CAACO,aAAN,CACjBC,SADiB,CAAnB;AAIA,eAAe,SAASC,WAATA,CAAAC,IAAA,EAMZ;EAAA,IALDC,QADqC,GAMpCD,IAAA,CALDC,QADqC;IAErCC,WAAA,GAICF,IAAA,CAJDE,WAAA;EAKA,IAAMC,KAAK,GAAGC,YAAY,CAAI;IAAEF,WAAA,EAAAA;EAAF,CAAJ,CAA1B;EACA,OAAOZ,KAAA,CAAAe,aAAA,CAACT,UAAD,CAAYU,QAAZ;IAAqBH,KAAK,EAAEA;EAA5B,GAAoCF,QAApC,CAAP;AACD;AAED,OAAO,SAASM,OAATA,CAAA,EAAsB;EAC3B,IAAMJ,KAAK,GAAGZ,UAAU,CAACK,UAAD,CAAxB;EACA,IAAI,CAACO,KAAL,EAAY;IACV,MAAM,IAAIK,KAAJ,CACJ,2DADI,CAAN;EAGD;EACD,OAAOL,KAAP;AACD;AAED,SAASC,YAATA,CAAAK,KAAA,EAIG;EAAA,IAHYC,eAAA,GAGZD,KAAA,CAHDP,WAAW;EAIX,IAAMS,KAAK,GAAGhB,QAAQ,EAAtB;EACA,IAAAiB,qBAAA,GAA4DD,KAA5D,CAAQE,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAGlB,aAAa,CAACmB,eAAA,GAAAD,qBAAA;EAExC,IAAME,QAAQ,GAAGrB,MAAM,CAACkB,KAAD,CAAvB;EACAG,QAAQ,CAACC,OAAT,GAAmBJ,KAAnB;EACA,IAAMK,UAAU,GAAAC,aAAA,CAAAA,aAAA,KACXvB,aAAa,CAACmB,eADA,GAEdA,eAAA,CAFL;EAIA,IAAMK,kBAAkB,GAAGzB,MAAM,CAACuB,UAAD,CAAjC;EACAE,kBAAkB,CAACH,OAAnB,GAA6BC,UAA7B;EAEA,IAAMG,WAAW,GAAG1B,MAAM,CAAC,IAAI2B,GAAJ,EAAD,CAA1B;EACA,IAAMC,aAAa,GAAG5B,MAAM,CAAC,IAAI2B,GAAJ,EAAD,CAA5B;EACA,IAAME,YAAY,GAAG7B,MAAM,CAAgB,IAAhB,CAA3B;EACA,IAAM8B,mBAAmB,GAAG9B,MAAM,CAAc,IAAd,CAAlC;EACA,IAAM+B,WAAW,GAAGd,eAAe,IAAIa,mBAAvC;EACA,IAAME,aAAa,GAAGhC,MAAM,CAAsB,IAAtB,CAA5B;EAcA,IAAMiC,IAAI,GAAGlC,OAAO,CAClB;IAAA,OAAO;MACL0B,kBADK,EACLA,kBADK;MAELC,WAFK,EAELA,WAFK;MAGLG,YAHK,EAGLA,YAHK;MAILE,WAJK,EAILA,WAJK;MAKLH,aALK,EAKLA,aALK;MAMLP,QANK,EAMLA,QANK;MAOLW,aAAA,EAAAA;IAPK,CAAP;EAAA,CADkB,EAUlB,EAVkB,CAApB;EAaA,OAAOC,IAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}